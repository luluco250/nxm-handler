#!/bin/bash

main() {
	# Redirect all output to a log file.
	exec > /tmp/nxm-handler.log 2>&1

	local title
	local url
	local mo2_pid
	local mo2_cmdline
	local success

	title=$(basename "$0")
	url=$1

	if [[ -z "$url" ]]; then
		message_box error 'No URL provided.'
		return 1
	fi

	mo2_pid=$(find_mo2)
	success=$?

	if [[ $success -ne 0 ]]; then
		message_box error \
		"Failed to find Mod Organizer 2, make sure it's running and try again!"
		return 1
	fi

	source_mo2_env_vars "$mo2_pid"

	if [ -n "$STEAM_COMPAT_DATA_PATH" ]; then
		# Original method that works for Steam.
		mo2_cmdline=$(get_mo2_cmdline "$mo2_pid" | sed 's/waitforexitandrun/run/')
	else
		# With Wine the command line seems to be incomplete, only containing the path
		# to the exe, rather than including the wine binary, so we'll get it from the
		# WINELOADER environment variable and insert it manually
		mo2_cmdline=$(
			tr '\0' ' ' < "/proc/$mo2_pid/cmdline" |
			sed 's/\s*$//'
		)
		mo2_cmdline="'$WINELOADER' '$mo2_cmdline'"
	fi

	eval "$mo2_cmdline '$url'"
}

find_mo2() {
	# Finds the first process id that started ModOrganizer.exe, which may be
	# Wine or Proton.

	local pid
	pid=$(pgrep -f ModOrganizer.exe | tail -n 1)

	if [[ -z "$pid" ]]; then
		return 1
	fi

	echo "$pid"
}

get_mo2_cmdline() {
	# Usage: get_cmdline_from_pid <process_id>
	#
	# Gets a sanitized command line for a given process id.
	# Spaces are escaped by quoting each argument.

	sed -E -e 's/.*--//g' < "/proc/$1/cmdline" | \
	strings -n 1 | \
	while read -r line; do
		printf "'%s' " "$line"
	done
}

source_mo2_env_vars() {
	# Usage: source_mo2_env_vars <process_id>
	#
	# Loads and re-exports variables used by the MO2 process..

	# We'll sanitize the env vars by converting the null separators to newlines
	# and then quoting the values.
	eval "$(tr '\0' '\n' < "/proc/$1/environ" | sed "s/=\(.*\)\$/='\1'/")"
	export STEAM_COMPAT_CLIENT_INSTALL_PATH
	export STEAM_COMPAT_DATA_PATH
	export WINEPREFIX
	export WINEFSYNC
}

get_mo2_env_vars() {
	strings < "/proc/$1/environ"
}



message_box() {
	# Usage: message_box [info | error] <text>

	if [[ -z "$2" ]]; then
		set -- 'info' "$1"
	fi

	case "$XDG_CURRENT_DESKTOP" in
		'KDE' | 'LXQt')
			try_kdialog "$@" || try_zenity "$@" || console_log "$@"
			;;
		*)
			try_zenity "$@" || try_kdialog "$@" || console_log "$@"
			;;
	esac
}

try_kdialog() {
	if ! type kdialog &>/dev/null; then
		return 1
	fi

	read -ra flags < <(get_kdialog_flags "$1")
	kdialog --title "$title" "${flags[@]}" "$2"
}

get_kdialog_flags() {
	case "$1" in
		'error') echo '--error' ;;
		*) echo '--msgbox' ;;
	esac
}

try_zenity() {
	if type zenity &>/dev/null; then
		return 1
	fi

	read -ra flags < <(get_zenity_flags "$1")
	zenity --title "$title" "${flags[@]}" "$2"
}

get_zenity_flags() {
	case "$1" in
		'error') echo '--error --text' ;;
		*) echo '--info --text' ;;
	esac
}

console_log() {
	echo "$1: $2"
}

main "$@"
